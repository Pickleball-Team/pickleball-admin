import { ConfigProvider, theme as antdTheme } from 'antd';
import { RouterProvider } from 'react-router-dom';

import { useEffect } from 'react';
import { HelmetProvider } from 'react-helmet-async';
import { useDispatch, useSelector } from 'react-redux';
import './App.css';
import { StylesContext } from './context';
import { useFetchMe } from './modules/User/hooks/useFetchMe.ts';
import { User } from './modules/User/models/index.ts';
import { setUser } from './redux/authencation/slice.ts';
import { RootState } from './redux/store';
import routes from './routes/routes.tsx';

// color palettes: triadic #A1A7CB, #CBA1A7, #A7CBA1
// 10 color objects of primary #2378c3 as generated by https://smart-swatch.netlify.app/#2378c3
// This is for reference purposes

export const COLOR = {
  50: '#e0f1ff',
  100: '#b0d2ff',
  200: '#7fb0ff',
  300: '#4d8bff',
  400: '#1e79fe',
  500: '#076ee5',
  600: '#0062b3',
  700: '#004f81',
  800: '#003650',
  900: '#001620',
  borderColor: '#E7EAF3B2',
};

function App() {
  const { mytheme } = useSelector((state: RootState) => state.theme);

  const { data, refetch } = useFetchMe();
  const dispatch = useDispatch();
  const isAuth = useSelector(
    (state: RootState) => state.authencation.isAuthenticated
  );

  // handle authentication
  useEffect(() => {
    refetch();
    console.log('refetch');
    
  }, [isAuth, refetch]);

  useEffect(() => {
    if (data) {
      const user = _createUserFromData(data);
      dispatch(setUser(user));
    } 
  }, [data, dispatch]);

  const _createUserFromData = (data: any): User => {
    return {
      id: data?.id ?? 0,
      firstName: data?.firstName ?? '',
      lastName: data?.lastName ?? '',
      secondName: data?.secondName ?? '',
      email: data?.email ?? '',
      dateOfBirth: data?.dateOfBirth ? new Date(data.dateOfBirth) : new Date(),
      avatarUrl: data?.avatarUrl ?? '',
      gender: data?.gender ?? '',
      status: data?.status ?? false,
      roleId: data?.roleId ?? 0,
      refreshToken: data?.refreshToken ?? '',
      createAt: data?.createAt ? new Date(data.createAt) : new Date(),
      refreshTokenExpiryTime: data?.refreshTokenExpiryTime
        ? new Date(data.refreshTokenExpiryTime)
        : new Date(),
    };
  };

  return (
    <HelmetProvider>
      <ConfigProvider
        theme={{
          token: {
            colorPrimary: COLOR['500'],
            borderRadius: 6,
            fontFamily: 'Lato, sans-serif',
          },
          components: {
            Breadcrumb: {
            },
            Button: {
              colorLink: COLOR['500'],
              colorLinkActive: COLOR['700'],
              colorLinkHover: COLOR['300'],
            },
            Calendar: {
              colorBgContainer: 'none',
            },
            Card: {
              colorBorderSecondary: COLOR['borderColor'],
            },
            Carousel: {
              colorBgContainer: COLOR['800'],
              dotWidth: 8,
            },
            Rate: {
              colorFillContent: COLOR['100'],
              colorText: COLOR['600'],
            },
            Segmented: {
              colorBgLayout: COLOR['100'],
              borderRadius: 6,
              colorTextLabel: '#000000',
            },
            Table: {
              borderColor: COLOR['100'],
              colorBgContainer: 'none',
              headerBg: 'none',
              rowHoverBg: COLOR['50'],
            },
            Tabs: {
              colorBorderSecondary: COLOR['100'],
            },
            Timeline: {
              dotBg: 'none',
            },
            Typography: {
              colorLink: COLOR['500'],
              colorLinkActive: COLOR['700'],
              colorLinkHover: COLOR['300'],
              linkHoverDecoration: 'underline',
            },
          },
          algorithm:
            mytheme === 'dark'
              ? antdTheme.darkAlgorithm
              : antdTheme.defaultAlgorithm,
        }}
      >
        <StylesContext.Provider
          value={{
            rowProps: {
              gutter: [
                { xs: 8, sm: 16, md: 24, lg: 32 },
                { xs: 8, sm: 16, md: 24, lg: 32 },
              ],
            },
            carouselProps: {
              autoplay: true,
              dots: true,
              dotPosition: 'bottom',
              infinite: true,
              slidesToShow: 3,
              slidesToScroll: 1,
            },
          }}
        >
          <RouterProvider router={routes} />
        </StylesContext.Provider>
      </ConfigProvider>
    </HelmetProvider>
  );
}

export default App;
